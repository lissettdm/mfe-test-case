!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n){class e extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"})}static get observedAttributes(){return["initValue","increment"]}connectedCallback(){this.count=0,this.increment=1,this.mount(),this.countInterval=setInterval(this.counter.bind(this),1e3),this.shadow.getElementById("btn-reset").addEventListener("click",this.reset.bind(this))}counter(){this.count=Number(this.count)+Number(this.increment),this.update()}attributeChangedCallback(){this.reset()}reset(){this.count=this.getAttribute("initValue")||0,this.increment=this.getAttribute("increment")||1,this.update();let t=this.getAttribute("onReset");"function"==typeof t&&t()}get style(){return"\n              <style>\n                *,\n                *::before,\n                *::after {\n                  box-sizing: border-box;\n                  margin: 0;\n                  padding: 0;\n                  font-family: system-ui;\n                }\n                .count {\n                    display: flex;\n                    flex-direction: column;\n                    width: 100%;\n                    background-color: orangered; \n                    padding: 1rem;\n                }\n                .count__value {\n                    color: #fff;\n                    font-size: 3rem;\n                    font-weigth: 300;      \n                }\n                .count__error {\n                    color: orangered;\n                    font-size: 1.6rem;\n                    font-weigth: normal;   \n                }\n                .count__btn-reset {\n                  border: none;\n                  display: block;\n                  background-color: #fff;\n                  color: #333;\n                  padding: .5rem;\n                  font-size: 1.6rem;\n                  text-transform: uppercase;\n                  transition: all .2s;\n                  cursor: pointer;\n                } \n                .count__btn-reset:focus {\n                  outline: none;\n                } \n                .count__btn-reset:active {\n                  transform: translateY(.2rem) scale(.99);\n                } \n                .count__btn-reset:hover {\n                  outline: none;\n                } \n              </style>\n            "}get template(){let t="";return t=Number.isNaN(this.count)?this.error("Some parameters are invalid!"):`\n          <div class="count">\n            <span class="count__value" id="count-value">\n                ${this.count}\n            </span>\n            <button type="button" class="count__btn-reset" id="btn-reset">Reset</button>\n          </div> `,this.style+t}update(){this.shadow.getElementById("count-value").innerHTML=this.count}mount(){this.shadow.innerHTML=this.template}async disconnectedCallback(){clearInterval(this.countInterval)}}window.customElements.define("count-ce",e)}]);